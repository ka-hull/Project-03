/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'            //Test coverage 
    id 'pmd'               // Code Analysis
    id 'com.github.spotbugs' version '5.0.5'  //Code Analysis
    id 'org.jbake.site' version '5.5.0'     //Website construction
    id 'edu.odu.cs.report_accumulator' version '1.4'    //Graphs in Webpages
    id 'org.hidetake.ssh' version '2.10.1'    //ssh takes in Gradle
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

jar {
    //Create a jar file name Driver.jar inside build/libs folder
    baseName = "Driver"

    manifest {
        attributes(
            "Main-Class": "edu.odu.cs.cs350.Driver"
        )
    }
}

run{
    //Accept command line user input as standard input
    main = "edu.odu.cs.cs350.Driver"
    standardInput = System.in
}

dependencies {
    // Use JUnit test framework.
   // testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.cs350.Driver'
}

//reportStats {
  //  reportsURL = 'https://project/reports/url/'
   // htmlSourceDir = file('src/main/html')  // default value
   // reportsDir = file('build/reports') // default value
    //buildID = "12345"                  // defaults to current date, but can be any run identifier
//}

tasks.named('test') {
    useJUnitPlatform()
    ignoreFailures = true
}

tasks.named('javadoc') {
    options.with {
        links 'https://docs.oracle.com/javase/8/docs/api/', 'gradle/javadocs/jdk'
    }
    failOnError = false;
}

build.dependsOn javadoc

tasks.register('reports') {
    dependsOn test
    dependsOn javadoc
}

tasks.register('deployReports') {
    dependsOn reports
    doLast {
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/reports')
        }
        ant.copy(todir: 'build/gh-pages') {
            fileset(dir: 'build/docs')
        }
    }
}

